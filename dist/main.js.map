{"version":3,"file":"main.js","mappings":";mBAIE,MAAMA,EACNC,YAAYC,GACVC,KAAKC,SAAWF,EAAQE,SACxBD,KAAKE,WAAaH,EAAQG,WAC1BF,KAAKG,UAAYJ,EAAQI,UACzBH,KAAKI,UAAYL,EAAQK,UACzBJ,KAAKK,UAAYN,EAAQM,UACzBL,KAAKM,WAAaP,EAAQO,WAC1BN,KAAKO,aAAeR,EAAQQ,aAE5BP,KAAKC,SAAWF,EAAQE,SACxBD,KAAKQ,MAAQR,KAAKC,SAASO,KAC7B,CAEAC,UACE,MAAsB,KAAfT,KAAKQ,KACd,CAEAE,SAASC,GACPX,KAAKC,SAASO,MAAQG,EACtBX,KAAKQ,MAAQG,CACf,CAEAC,UAEE,MADmB,iBACDC,KAAKb,KAAKQ,MAC9B,CAEAM,iBAAiBC,EAASC,EAAcC,GAClCF,GACFf,KAAKM,WAAWY,UAAUC,IAAI,UAC9BnB,KAAKM,WAAWY,UAAUE,OAAO,YACjCpB,KAAKG,UAAUkB,UAAY,mMAE3BrB,KAAKM,WAAWY,UAAUE,OAAO,UACjCpB,KAAKM,WAAWY,UAAUC,IAAI,YAC9BnB,KAAKG,UAAUkB,UAAYrB,KAAKE,WAAWM,MAAQS,EAAeD,EAEtE,CAEAM,gBACEtB,KAAKC,SAASsB,iBAAiB,SAAS,KACtC,MAAMR,GCrCkBS,EDqCMxB,KAAKE,WAAWM,MCrCViB,EDqCiBzB,KAAKO,aCrCbH,EDqC2BJ,KAAKI,UCrCrBC,EDqCgCL,KAAKK,YCpC9FmB,EAAWE,OAAStB,GAAaoB,EAAWE,OAASrB,IAEhB,IAA7BmB,EAAWG,MAAMF,IAHvB,IAAuBD,EAAYC,EAASrB,EAAWC,EDsCxDL,KAAKc,iBAAiBC,EAAS,8BAA+B,OAAOf,KAAKI,iBAAiBJ,KAAKK,oBAAoB,GAExH,CAEAuB,gBACE5B,KAAKC,SAASsB,iBAAiB,SAAS,KACtC,MAAMR,GCpDkBc,EDoDM7B,KAAKE,WAAWM,MCpDViB,EDoDiBzB,KAAKO,eCnD3DsB,EAAWF,MAAMF,IADf,IAAuBI,EAAYJ,EDqDpCzB,KAAKc,iBAAiBC,EAAS,8BAA+B,2CAA2C,GAE7G,CAEAe,mBACE9B,KAAKC,SAASsB,iBAAiB,SAAS,KACtC,MAAMR,GCzCqBgB,EDyCM/B,KAAKE,WAAWM,QAAOR,KAAKO,aCxCtDM,KAAKkB,IADX,IAA0BA,ED0C3B/B,KAAKc,iBAAiBC,EAAS,iCAAkC,iDAAiD,GAEtH,EAGF,MAAMiB,EAAW,IAAInC,EAAM,CACzBI,SAAUgC,SAASC,eAAe,SAClChC,WAAY+B,SAASC,eAAe,SACpC/B,UAAW8B,SAASC,eAAe,cACnC3B,aAAc,eACdH,UAAW,EACXC,UAAW,GACXC,WAAY2B,SAASC,eAAe,qBAGhCC,EAAW,IAAItC,EAAM,CACzBI,SAAUgC,SAASC,eAAe,SAClChC,WAAY+B,SAASC,eAAe,SACpC/B,UAAW8B,SAASC,eAAe,cACnC3B,aAAc,4BACdD,WAAY2B,SAASC,eAAe,qBAGhCE,EAAc,IAAIvC,EAAM,CAC5BI,SAAUgC,SAASC,eAAe,YAClChC,WAAY+B,SAASC,eAAe,YACpC/B,UAAW8B,SAASC,eAAe,iBACnC3B,aAAc,sBACdD,WAAY2B,SAASC,eAAe,wBAGtCF,EAASV,gBACTa,EAASP,gBACTQ,EAAYN,mBAEE,IAAIjC,EAAM,CAACI,SAAUgC,SAASC,eAAe","sources":["webpack://form-validate-page/./src/index.js","webpack://form-validate-page/./node_modules/sy-validator/libaryValidations.js"],"sourcesContent":["\r\nimport {validateEmail, validateLogin, validatePassword} from 'sy-validator';\r\n\r\n  //! ES6 ==============\r\n  class Input {\r\n  constructor(options) {\r\n    this.domInput = options.domInput\r\n    this.inputValue = options.inputValue\r\n    this.inputInfo = options.inputInfo\r\n    this.minLength = options.minLength\r\n    this.maxLength = options.maxLength\r\n    this.inputState = options.inputState\r\n    this.inputPattern = options.inputPattern\r\n\r\n    this.domInput = options.domInput\r\n    this.value = this.domInput.value;\r\n  }\r\n\r\n  isEmpty() {\r\n    return this.value === '';\r\n  }\r\n\r\n  setValue(newValue) {\r\n    this.domInput.value = newValue;\r\n    this.value = newValue;\r\n  }\r\n\r\n  isPhone() {\r\n    const phoneRegex = /^\\+?\\d{10,15}$/;\r\n    return phoneRegex.test(this.value);\r\n  }\r\n\r\n  updateInputState(isValid, emptyMessage, validMessage) {\r\n    if (isValid) {\r\n      this.inputState.classList.add('valide');\r\n      this.inputState.classList.remove('unvalide');\r\n      this.inputInfo.innerHTML = `<p>link to get function </p> <a href=\"https://pretya.github.io/library-validations/libaryValidations.js\" target=\"_blank\">https://pretya.github.io/library-validations/libaryValidations.js</a>`;\r\n    } else {\r\n      this.inputState.classList.remove('valide');\r\n      this.inputState.classList.add('unvalide');\r\n      this.inputInfo.innerHTML = this.inputValue.value ? validMessage : emptyMessage;\r\n    }\r\n  }\r\n\r\n  validateLogin() {\r\n    this.domInput.addEventListener('keyup', () => {\r\n      const isValid = validateLogin(this.inputValue.value, this.inputPattern, this.minLength, this.maxLength);\r\n      this.updateInputState(isValid, `<--- Pleas enter your login`, `min ${this.minLength} max ${this.maxLength} letters`);\r\n    });\r\n  }\r\n  \r\n  validateEmail() {\r\n    this.domInput.addEventListener('keyup', () => {\r\n      const isValid = validateEmail(this.inputValue.value, this.inputPattern);\r\n      this.updateInputState(isValid, `<--- Pleas enter your email`, `Should look like this \"info@support.com\"`);\r\n    });\r\n  }\r\n  \r\n  validatePassword() {\r\n    this.domInput.addEventListener('keyup', () => {\r\n      const isValid = validatePassword(this.inputValue.value, this.inputPattern);\r\n      this.updateInputState(isValid, `<--- Pleas enter your password`, `Must contain Latin + numbers (minimum 1 digit)`);\r\n    });\r\n  }\r\n}\r\n\r\nconst loginES6 = new Input({\r\n  domInput: document.getElementById('login'), \r\n  inputValue: document.getElementById('login'), \r\n  inputInfo: document.getElementById('info-login'), \r\n  inputPattern: /[a-zA-Z0-9]+/, \r\n  minLength: 6, \r\n  maxLength: 12, \r\n  inputState: document.getElementById('indicator-login'),\r\n})\r\n\r\nconst emailES6 = new Input({\r\n  domInput: document.getElementById('email'), \r\n  inputValue: document.getElementById('email'), \r\n  inputInfo: document.getElementById('info-email'), \r\n  inputPattern: /^[^ ]+@[^ ]+\\.[a-z]{2,3}$/, \r\n  inputState: document.getElementById('indicator-email'), \r\n})\r\n\r\nconst passwordES6 = new Input({\r\n  domInput: document.getElementById('password'), \r\n  inputValue: document.getElementById('password'), \r\n  inputInfo: document.getElementById('info-password'), \r\n  inputPattern: /^(?=.*\\d)\\w{3,20}$/m, \r\n  inputState: document.getElementById('indicator-password'),\r\n})\r\n\r\nloginES6.validateLogin()\r\nemailES6.validateEmail()\r\npasswordES6.validatePassword()\r\n\r\nconst field = new Input({domInput: document.getElementById('login')});\r\n\r\n// ! ES5 ===============\r\n\r\n//   function InputField(options) {\r\n//         this.domInput = options.domInput\r\n//         this.inputValue = options.inputValue\r\n//         this.inputInfo = options.inputInfo\r\n//         this.minLength = options.minLength\r\n//         this.maxLength = options.maxLength\r\n//         this.inputState = options.inputState\r\n//         this.inputPattern = options.inputPattern\r\n//   }\r\n\r\n//   InputField.prototype.isValidateLogin = function() {\r\n//     this.domInput.addEventListener('keyup', () => {\r\n//       if(validateLogin(this.inputValue.value, this.inputPattern, this.minLength, this.maxLength)) {\r\n//         this.inputState.classList.add('valide')\r\n//         this.inputState.classList.remove('unvalide')\r\n//         this.inputInfo.innerHTML = `<p>link to get function </p> <a href=\"https://pretya.github.io/library-validations/libaryValidations.js\" target=\"_blank\">https://pretya.github.io/library-validations/libaryValidations.js</a>`\r\n//       } else {\r\n//         this.inputState.classList.remove('valide')\r\n//         this.inputState.classList.add('unvalide')\r\n//         this.inputInfo.innerHTML = `min ${this.minLength} max ${this.maxLength} letters`\r\n//       }\r\n//       if(this.inputValue.value == '') {\r\n//         this.inputState.classList.remove('unvalide')\r\n//         this.inputState.classList.remove('valide')\r\n//         this.inputInfo.innerHTML = `<--- Pleas enter your login`\r\n//       }\r\n//     })\r\n//   }\r\n//   InputField.prototype.isValidateEmail = function() {\r\n//   this.domInput.addEventListener('keyup', () => {\r\n//     if(validateEmail(this.inputValue.value, this.inputPattern,)) {\r\n//       this.inputState.classList.add('valide')\r\n//       this.inputState.classList.remove('unvalide')\r\n//       this.inputInfo.innerHTML = `<p>link to get function </p> <a href=\"https://pretya.github.io/library-validations/libaryValidations.js\" target=\"_blank\">https://pretya.github.io/library-validations/libaryValidations.js</a>`\r\n//     } else {\r\n//       this.inputState.classList.remove('valide')\r\n//       this.inputState.classList.add('unvalide')\r\n//       this.inputInfo.innerHTML = `Should look like this \"info@support.com\"`\r\n//     }\r\n//     if(this.inputValue.value == '') {\r\n//       this.inputState.classList.remove('unvalide')\r\n//       this.inputState.classList.remove('valide')\r\n//       this.inputInfo.innerHTML = `<--- Pleas enter your email`\r\n//     }\r\n//   })\r\n//   }\r\n//   InputField.prototype.isValidatePassword = function() {\r\n//   this.domInput.addEventListener('keyup', () => {\r\n//     if(validatePassword(this.inputValue.value, this.inputPattern,)) {\r\n//       this.inputState.classList.add('valide')\r\n//       this.inputState.classList.remove('unvalide')\r\n//       this.inputInfo.innerHTML = `<p>link to get function </p> <a href=\"https://pretya.github.io/library-validations/libaryValidations.js\" target=\"_blank\">https://pretya.github.io/library-validations/libaryValidations.js</a>`\r\n//     } else {\r\n//       this.inputState.classList.remove('valide')\r\n//       this.inputState.classList.add('unvalide')\r\n//       this.inputInfo.innerHTML = `Must contain Latin + numbers (minimum 1 digit)`\r\n//     }\r\n//     if(this.inputValue.value == '') {\r\n//       this.inputState.classList.remove('unvalide')\r\n//       this.inputState.classList.remove('valide')\r\n//       this.inputInfo.innerHTML = `<--- Pleas enter your login`\r\n//     }\r\n//   })\r\n//   }\r\n//   const loginES5 = new InputField({\r\n//     domInput: document.getElementById('login'), \r\n//     inputValue: document.getElementById('login'), \r\n//     inputInfo: document.getElementById('info-login'), \r\n//     inputPattern: /[a-zA-Z0-9]+/, \r\n//     minLength: 6, \r\n//     maxLength: 12, \r\n//     inputState: document.getElementById('indicator-login'), \r\n//   })\r\n//   const emailES5 = new InputField({\r\n//     domInput: document.getElementById('email'), \r\n//     inputValue: document.getElementById('email'), \r\n//     inputInfo: document.getElementById('info-email'), \r\n//     inputPattern: /^[^ ]+@[^ ]+\\.[a-z]{2,3}$/, \r\n//     inputState: document.getElementById('indicator-email'), \r\n//   })\r\n//   const passwordES5 = new InputField({\r\n//     domInput: document.getElementById('password'), \r\n//     inputValue: document.getElementById('password'), \r\n//     inputInfo: document.getElementById('info-password'), \r\n//     inputPattern: /^(?=.*\\d)\\w{3,20}$/m, \r\n//     inputState: document.getElementById('indicator-password'), \r\n//   })\r\n\r\n//   loginES5.isValidateLogin()\r\n//   emailES5.isValidateEmail()\r\n//   passwordES5.isValidatePassword()\r\n","\r\nexport function validateEmail(emailValue, pattern) {\r\n  if(emailValue.match(pattern)) {\r\n    return true\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport function validateLogin(loginValue, pattern, minLength, maxLength) {\r\n  if(loginValue.length < minLength || loginValue.length > maxLength) {\r\n    return false;\r\n  } else if(!loginValue.match(pattern) == true) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport function validatePassword(passwordValue, pattern) {\r\n  if(pattern.test(passwordValue)) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n"],"names":["Input","constructor","options","this","domInput","inputValue","inputInfo","minLength","maxLength","inputState","inputPattern","value","isEmpty","setValue","newValue","isPhone","test","updateInputState","isValid","emptyMessage","validMessage","classList","add","remove","innerHTML","validateLogin","addEventListener","loginValue","pattern","length","match","validateEmail","emailValue","validatePassword","passwordValue","loginES6","document","getElementById","emailES6","passwordES6"],"sourceRoot":""}