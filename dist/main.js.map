{"version":3,"file":"main.js","mappings":"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","sources":["webpack://form-validate-page/./src/index.js","webpack://form-validate-page/./node_modules/sy-validator/libaryValidations.js"],"sourcesContent":["\r\nimport {validateEmail, validateLogin, validatePassword} from 'sy-validator';\r\n\r\n  //! ES6 ==============\r\n  class Input {\r\n  constructor(options) {\r\n    this.domInput = options.domInput\r\n    this.inputValue = options.inputValue\r\n    this.inputInfo = options.inputInfo\r\n    this.minLength = options.minLength\r\n    this.maxLength = options.maxLength\r\n    this.inputState = options.inputState\r\n    this.inputPattern = options.inputPattern\r\n  }\r\n\r\n  isEmpty() {\r\n    return this.inputValue.value === '';\r\n  }\r\n\r\n  setValue(newValue) {\r\n    this.domInput.value = newValue;\r\n  }\r\n\r\n  isPhone() {\r\n    this.domInput.addEventListener('keyup', () => {\r\n      const isValid = this.inputPattern.test(this.inputValue.value);\r\n      this.updateInputState(isValid, `<--- Please enter your phone number`, `Should contain 10 to 15 digits`);\r\n   });\r\n  }\r\n\r\n  updateInputState(isValid, emptyMessage, validMessage) {\r\n    if (isValid) {\r\n      this.inputState.classList.add('valide');\r\n      this.inputState.classList.remove('unvalide');\r\n      this.inputInfo.innerHTML = `<p>link to get function </p> <a href=\"https://www.npmjs.com/package/sy-validator\" target=\"_blank\">https://www.npmjs.com/package/sy-validator</a>`;\r\n    } else {\r\n      this.inputState.classList.remove('valide');\r\n      this.inputState.classList.add('unvalide');\r\n      this.inputInfo.innerHTML = this.inputValue.value ? validMessage : emptyMessage;\r\n    }\r\n    if (this.inputValue.value === '') {\r\n      this.inputState.classList.remove('valide');\r\n      this.inputState.classList.remove('unvalide');\r\n    }\r\n  }\r\n\r\n  validateLogin() {\r\n    this.domInput.addEventListener('keyup', () => {\r\n      const isValid = validateLogin(this.inputValue.value, this.inputPattern, this.minLength, this.maxLength);\r\n      this.updateInputState(isValid, `<--- Pleas enter your login`, `min ${this.minLength} max ${this.maxLength} letters`);\r\n    });\r\n  }\r\n  \r\n  validateEmail() {\r\n    this.domInput.addEventListener('keyup', () => {\r\n      const isValid = validateEmail(this.inputValue.value, this.inputPattern);\r\n      this.updateInputState(isValid, `<--- Pleas enter your email`, `Should look like this \"info@support.com\"`);\r\n    });\r\n  }\r\n  \r\n  validatePassword() {\r\n    this.domInput.addEventListener('keyup', () => {\r\n      const isValid = validatePassword(this.inputValue.value, this.inputPattern);\r\n      this.updateInputState(isValid, `<--- Pleas enter your password`, `Must contain Latin + numbers (minimum 1 digit)`);\r\n    });\r\n  }\r\n}\r\n\r\nconst loginES6 = new Input({\r\n  domInput: document.getElementById('login'), \r\n  inputValue: document.getElementById('login'), \r\n  inputInfo: document.getElementById('info-login'), \r\n  inputPattern: /[a-zA-Z0-9]+/, \r\n  minLength: 6, \r\n  maxLength: 12, \r\n  inputState: document.getElementById('indicator-login'),\r\n})\r\n\r\nconst emailES6 = new Input({\r\n  domInput: document.getElementById('email'), \r\n  inputValue: document.getElementById('email'), \r\n  inputInfo: document.getElementById('info-email'), \r\n  inputPattern: /^[^ ]+@[^ ]+\\.[a-z]{2,3}$/, \r\n  inputState: document.getElementById('indicator-email'), \r\n})\r\n\r\nconst passwordES6 = new Input({\r\n  domInput: document.getElementById('password'), \r\n  inputValue: document.getElementById('password'), \r\n  inputInfo: document.getElementById('info-password'), \r\n  inputPattern: /^(?=.*\\d)\\w{3,20}$/m, \r\n  inputState: document.getElementById('indicator-password'),\r\n})\r\n\r\nconst field = new Input({\r\n  domInput: document.getElementById('phone'),\r\n  inputValue: document.getElementById('phone'), \r\n  inputInfo: document.getElementById('info-phone'),\r\n  inputState: document.getElementById('indicator-phone'),\r\n  inputPattern: /^\\+?\\d{10,15}$/,\r\n});\r\n\r\nloginES6.validateLogin()\r\nemailES6.validateEmail()\r\npasswordES6.validatePassword()\r\nconsole.log();\r\n// field.setValue('')\r\nfield.isPhone()\r\n","\r\nexport function validateEmail(emailValue, pattern) {\r\n  if(emailValue.match(pattern)) {\r\n    return true\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport function validateLogin(loginValue, pattern, minLength, maxLength) {\r\n  if(loginValue.length < minLength || loginValue.length > maxLength) {\r\n    return false;\r\n  } else if(!loginValue.match(pattern) == true) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport function validatePassword(passwordValue, pattern) {\r\n  if(pattern.test(passwordValue)) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n"],"names":["Input","constructor","options","this","domInput","inputValue","inputInfo","minLength","maxLength","inputState","inputPattern","isEmpty","value","setValue","newValue","isPhone","addEventListener","isValid","test","updateInputState","emptyMessage","validMessage","classList","add","remove","innerHTML","validateLogin","loginValue","pattern","length","match","validateEmail","emailValue","validatePassword","passwordValue","loginES6","document","getElementById","emailES6","passwordES6","field","console","log"],"sourceRoot":""}